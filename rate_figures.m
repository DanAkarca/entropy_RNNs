%% replication of figures for constrained RNNs: RATE
% written by danyal akarca, imperial college london & university of cambridge, 2024

% this code allows for replicating key rate RNN figures

% set up code
clear; clc;
repo = '/Users/da04/Desktop/repo'; % set repo directory
cd(repo); % cd to repo
load('data/rate_data.mat'); % load rate data
load('data/rate_rnns_entropy_statistics.mat'); % load rate statistics (generated by rate_generate_statistics.m)
% add paths
addpath('prereq/2019_03_03_BCT/'); % load prereqisites
addpath('prereq/colorBrewer/'); % load prereqisites

%% before replication - store convergent networks

accthr = 0.9; % set accuracy threshold
filtered_rate_rnns_entropy_statistics = rate_rnns_entropy_statistics;
nstat = 6; % set number of statistics
epochaccthr = 11; % at what epoch they should be at that accuracy
stat_label = string({... % set labels
    'Shannon entropy (W)',... % shannon of absolute weight matrix
    'Shannon entropy (C)',... % shannon of normalised communicability matrix of absolute weight matrix
    'Modularity (Q)',... % directed modularity
    '\lambda_{max}',... % leading eigenvalue (non absolute weight matrix)
    'Spectral entropy',... % spectral entropy (non absolute weight matrix)
    'Total weight'}); % total absolute weights

% loop over networks and epochs
for net = 1:1001;
    for epoch = 1:11;
        if network_data.accuracy.accuracy{1}(net,epochaccthr,2) < accthr;
        filtered_rate_rnns_entropy_statistics.L1(net,epoch,:) = nan(1,nstat);
        end
        if network_data.accuracy.accuracy{2}(net,epochaccthr,2) < accthr;
        filtered_rate_rnns_entropy_statistics.seRNN(net,epoch,:) = nan(1,nstat);
        end
    end
end
for net = 1:101;
    for epoch = 1:11;
        if network_data.accuracy.accuracy{3}(net,epochaccthr,2) < accthr;
        filtered_rate_rnns_entropy_statistics.Donly(net,epoch,:) = nan(1,nstat);
        end
        if network_data.accuracy.accuracy{4}(net,epochaccthr,2) < accthr;
        filtered_rate_rnns_entropy_statistics.Conly(net,epoch,:) = nan(1,nstat);
        end
        if network_data.accuracy.accuracy{5}(net,epochaccthr,2) < accthr;
        filtered_rate_rnns_entropy_statistics.Random(net,epoch,:) = nan(1,nstat);
        end
        if network_data.accuracy.accuracy{6}(net,epochaccthr,2) < accthr;
        filtered_rate_rnns_entropy_statistics.Hard(net,epoch,:) = nan(1,nstat);
        end
    end
end

%% figure 2 - modularity, shannon entropy, relationships

%%% figure 2a %%%

% set measure
measure = 3;

% get measures
mean_measure_L1 = mean(filtered_rate_rnns_entropy_statistics.L1(:,:,measure),1,'omitnan');
se_measure_L1 = std(filtered_rate_rnns_entropy_statistics.L1(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_rate_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
mean_measure_seRNN = mean(filtered_rate_rnns_entropy_statistics.seRNN(:,:,measure),1,'omitnan');
se_measure_seRNN = std(filtered_rate_rnns_entropy_statistics.seRNN(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_rate_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
% visualise
h = figure; h.Position = [100 100 450 300];
u = errorbar(mean_measure_L1,2*se_measure_L1,...
    'linewidth',4,...
    'color',network_data.trained_rnns.l1.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
hold on;
u = errorbar(mean_measure_seRNN,2*se_measure_seRNN,...
    'linewidth',4,...
    'color',network_data.trained_rnns.seRNN.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel('Epoch'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
xlim([.5 11.5]);
legend({'L1','seRNN'},'box','off','location','northwest');

%%% figure 2b %%%

% set measure
measure = 1;

% get measures
mean_measure_L1 = mean(filtered_rate_rnns_entropy_statistics.L1(:,:,measure),1,'omitnan');
se_measure_L1 = std(filtered_rate_rnns_entropy_statistics.L1(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_rate_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
mean_measure_seRNN = mean(filtered_rate_rnns_entropy_statistics.seRNN(:,:,measure),1,'omitnan');
se_measure_seRNN = std(filtered_rate_rnns_entropy_statistics.seRNN(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_rate_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
% visualise
h = figure; h.Position = [600 100 450 300];
u = errorbar(mean_measure_L1,2*se_measure_L1,...
    'linewidth',4,...
    'color',network_data.trained_rnns.l1.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
hold on;
u = errorbar(mean_measure_seRNN,2*se_measure_seRNN,...
    'linewidth',4,...
    'color',network_data.trained_rnns.seRNN.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel('Epoch'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
xlim([.5 11.5]);
legend({'L1','seRNN'},'box','off','location','northeast');

%%% figure 2c %%%

% pick epoch
epoch = 11;
% pick network measures
xmeasure = 3; 
ymeasure = 1;

% relate L1 and seRNN
h = figure; h.Position = [1100 100 450 300];
% visualise
scatter(filtered_rate_rnns_entropy_statistics.L1(:,epoch,xmeasure),filtered_rate_rnns_entropy_statistics.L1(:,epoch,ymeasure),...
    50,'o','markerfacecolor',network_data.trained_rnns.l1.palette,'markeredgecolor','w');
hold on;
scatter(filtered_rate_rnns_entropy_statistics.seRNN(:,epoch,xmeasure),filtered_rate_rnns_entropy_statistics.seRNN(:,epoch,ymeasure),...
    50,'o','markerfacecolor',network_data.trained_rnns.seRNN.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel(stat_label(xmeasure)); ylabel(stat_label(ymeasure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
legend({'L1','seRNN'},'box','off');

%% figure 3 - explaining low Shannon entropy with spatial constraints

%%% figure 3a %%%

% pick epoch
epoch = 11;
% pick network measures
xmeasure = 6; 
ymeasure = 1;

% relate L1 and seRNN
h = figure; h.Position = [100 500 450 300];
% visualise
scatter(filtered_rate_rnns_entropy_statistics.L1(:,epoch,xmeasure),filtered_rate_rnns_entropy_statistics.L1(:,epoch,ymeasure),...
    50,'o','markerfacecolor',network_data.trained_rnns.l1.palette,'markeredgecolor','w');
hold on;
scatter(filtered_rate_rnns_entropy_statistics.seRNN(:,epoch,xmeasure),filtered_rate_rnns_entropy_statistics.seRNN(:,epoch,ymeasure),...
    50,'o','markerfacecolor',network_data.trained_rnns.seRNN.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel(stat_label(xmeasure)); ylabel(stat_label(ymeasure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
legend({'L1','seRNN'},'box','off');

%%% figure 3b %%%

% find appropriate networks
l1m = filtered_rate_rnns_entropy_statistics.L1(:,11,1); %
[~,l1i] = min(abs(l1m - mean(l1m,'omitnan')));
sernnm = filtered_rate_rnns_entropy_statistics.seRNN(:,11,1);
[~,sernni] = min(abs(sernnm - mean(sernnm,'omitnan')));

% show an example network over training with eigenspectra and how the pij distribution changes
% seRNN
epochs = [1 6 11];
net = 596; % based on prior max ks entropy --- this is changable
N = 100;
type = 2;
pij = zeros(length(epochs),N,N);
eigen = zeros(length(epochs),N);
for epoch = 1:length(epochs);
    % get network
    jx = squeeze(network_data.trained_rnns.connectivity{type}(net,epochs(epoch),:,:));
    % compute shannon entropy/random walker aspect
    for i = 1:N 
        for j = 1:N 
            pij(epoch,i,j) = (abs(jx(i, j)))/(sum(abs(jx(i, :))));
        end
    end
    % compute eigenspectra - based on ks entropy
    jxx = threshold_proportional(abs(jx),.1);
    jb = double(jxx>0);
    eigen(epoch,:) = eig(jb);
end

% colour progression: early, middle, late
%pals = [255 225 225; 255 195 195; 255 157 157]./256;
pals = [255 225 225; 255 165 165; 255 107 107]./256;

% plot how pij changes over epochs
indx = find(triu(ones(N),1));
h = figure; h.Position = [600 500 450 300];
for epoch = 1:length(epochs);
    d = squeeze(pij(epoch,:,:));
    x = d(indx);
    x(x>0.035) = NaN; % threshold away
    histogram(x,'edgecolor','w','facecolor',pals(epoch,:));
    hold on;
end
ylim([0 2750]);
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; 
xlabel('\itp_{i,j}'); ylabel('Frequency'); b.FontName = 'Gills Sans'; b.FontSize = 12; 
legend({'Early training','Mid training','Late training'},'box','off');

% plot the pij to space over epochs
h = figure; h.Position = [600 100 450 300];
for epoch = 1:length(epochs);
    jx = abs(squeeze(network_data.trained_rnns.connectivity{type}(net,epochs(epoch),:,:)));
    dx = network_data.trained_rnns.space.euclidean;
    [r1(epoch),p1(epoch)] = corr(jx(:),dx(:));
    scatter(abs(jx(:)),dx(:),300,'.','markeredgecolor',pals(epoch,:));
    hold on;
end
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; 
xlabel('Euclidean distance'); ylabel('\itp_{i,j}'); b.FontName = 'Gills Sans'; b.FontSize = 12; 
legend({'Early training','Mid training','Late training'},'box','off');
xlim([0 0.6]);

% show an example network over training with eigenspectra and how the pij distribution changes
% L1
epochs = [1 6 11];
net = 2; % based on prior ks max --- this is changable
N = 100;
type = 1;
pij = zeros(length(epochs),N,N);
eigen = zeros(length(epochs),N);
for epoch = 1:length(epochs);
    % get network
    jx = squeeze(network_data.trained_rnns.connectivity{type}(net,epochs(epoch),:,:));
    % compute shannon entropy/random walker aspect
    for i = 1:N 
        for j = 1:N 
            pij(epoch,i,j) = (abs(jx(i, j)))/(sum(abs(jx(i, :))));
        end
    end
    % compute eigenspectra - based on ks entropy
    jxx = threshold_proportional(abs(jx),.1);
    jb = double(jxx>0);
    eigen(epoch,:) = eig(jb);
end

% colour progression: early, middle, late
% pals = [153 213 213; 76 182 182; 0 151 151]./256;
pals = [183 233 233; 76 182 182; 0 80 80]./256;

% plot how pij changes over epochs
indx = find(triu(ones(N),1));
h = figure; h.Position = [1100 500 450 300];
for epoch = 1:length(epochs);
    d = squeeze(pij(epoch,:,:));
    x = d(indx);
    x(x>0.035)=NaN; % threshold away
    histogram(x,'edgecolor','w','facecolor',pals(epoch,:));
    hold on;
end
ylim([0 2750]);
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; 
xlabel('\itp_{i,j}'); ylabel('Frequency'); b.FontName = 'Gills Sans'; b.FontSize = 12; 
legend({'Early training','Mid training','Late training'},'box','off');

% plot the pij to space over epochs
h = figure; h.Position = [1100 100 450 300];
for epoch = 1:length(epochs);
    jx = squeeze(network_data.trained_rnns.connectivity{type}(net,epochs(epoch),:,:));
    dx = network_data.trained_rnns.space.euclidean;
    [r1(epoch),p1(epoch)] = corr(jx(:),dx(:));
    scatter(abs(jx(:)),dx(:),300,'.','markeredgecolor',pals(epoch,:));
    hold on;
end
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; 
xlabel('Euclidean distance'); ylabel('\itp_{i,j}'); b.FontName = 'Gills Sans'; b.FontSize = 12; 
legend({'Early training','Mid training','Late training'},'box','off');
xlim([0 0.6]);

%% figure 4 - explaining low Shannon entropy with communication constraints

%%% figure 4a %%%

% set measure
measure = 2;

% get measures
mean_measure_L1 = mean(filtered_rate_rnns_entropy_statistics.L1(:,:,measure),1,'omitnan');
se_measure_L1 = std(filtered_rate_rnns_entropy_statistics.L1(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_rate_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
mean_measure_seRNN = mean(filtered_rate_rnns_entropy_statistics.seRNN(:,:,measure),1,'omitnan');
se_measure_seRNN = std(filtered_rate_rnns_entropy_statistics.seRNN(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_rate_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
% visualise
h = figure; h.Position = [100 600 450 300];
u = errorbar(mean_measure_L1,2*se_measure_L1,...
    'linewidth',4,...
    'color',network_data.trained_rnns.l1.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
hold on;
u = errorbar(mean_measure_seRNN,2*se_measure_seRNN,...
    'linewidth',4,...
    'color',network_data.trained_rnns.seRNN.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel('Epoch'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
xlim([.5 11.5]);
legend({'L1','seRNN'},'box','off','location','northeast');

%%% figure 4b %%%

% compare the communicability histograms of two networks
nnode = 100;
epoch = 11;
N = 200; % set network

% get network
sernn_w = squeeze(network_data.trained_rnns.connectivity{2}(N,epoch,:,:));
l1_w = squeeze(network_data.trained_rnns.connectivity{1}(N,epoch,:,:));

% absolute normalised communicability matrix
x = zeros(nnode);
s = diag(sum(abs(sernn_w),2));
adj = (s^-.5)*abs(sernn_w)*(s^-.5);
sernn_c = expm(adj);
x = zeros(nnode);
s = diag(sum(abs(l1_w),2));
adj = (s^-.5)*abs(l1_w)*(s^-.5);
l1_c = expm(adj);

% plot some networks
h = figure; h.Position = [600 600 450 300];
ax(1) = subplot(2,2,1); imagesc(abs(sernn_w)./max(abs(sernn_w),[],'all')); xlabel('Neuron'); ylabel('Neuron'); 
caxis([0 1]); c = colorbar; c.Label.String = 'Weight'; 
b = gca; b.FontName = 'Arial'; b.FontSize = 12; xticks([]); yticks([]);
ax(2) = subplot(2,2,2); imagesc(log(sernn_c)); colorbar; xlabel('Neuron'); ylabel('Neuron'); 
caxis([-8 1]); c = colorbar; c.Label.String = 'ln(C)'; 
b = gca; b.FontName = 'Arial'; b.FontSize = 12; xticks([]); yticks([]); 
ax(3) = subplot(2,2,3); imagesc(abs(l1_w)./max(abs(l1_w),[],'all')); xlabel('Neuron'); ylabel('Neuron'); 
caxis([0 1]); c = colorbar; c.Label.String = 'Weight';
b = gca; b.FontName = 'Arial'; b.FontSize = 12; xticks([]); yticks([]); 
ax(4) = subplot(2,2,4); imagesc(log(l1_c)); xlabel('Neuron'); ylabel('Neuron'); 
caxis([-8 1]); c = colorbar; c.Label.String = 'ln(C)'; 
b = gca; b.FontName = 'Arial'; b.FontSize = 12; xticks([]); yticks([]);
colormap(ax(1),brewermap([],'PuRd'));
colormap(ax(2),brewermap([],'PuRd'));
colormap(ax(3),brewermap([],'BuGn'));
colormap(ax(4),brewermap([],'BuGn'));

%%% figure 4c %%%

% giant component of communicability network
h = figure; h.Position = [100 100 1000 350];
for t = 1:4;
    thresholds = [-3.1 -3 -2.9 -2.8];
    thr = thresholds(t); % -3.1 -3 -2.9
    x = log(sernn_c); 
    y = log(l1_c);
    x = double(x>thr); x(find(eye(nnode))) = 0;
    y = double(y>thr); y(find(eye(nnode))) = 0;
    [comps comp_sizes] = get_components(x); i = find(comp_sizes==max(comp_sizes)); gc = find(comps==i);
    gx = digraph(x(gc,gc)); 
    [comps comp_sizes] = get_components(y); i = find(comp_sizes==max(comp_sizes)); gc = find(comps==i);
    gy = digraph(y(gc,gc)); 
    subplot(2,4,t); plot(gx,...
        'nodelabel',[],...
        'nodecolor',[.7 .7 .7],...
        'edgecolor',network_data.trained_rnns.seRNN.palette,...
        'edgealpha',.7); axis off;
    subplot(2,4,t+4); plot(gy,...
        'nodelabel',[],...
        'nodecolor',[.7 .7 .7],...
        'edgecolor',network_data.trained_rnns.l1.palette,...
        'edgealpha',.7); axis off;
end

%% figure 5 - spectral changes under constraints

%%% figure 5a %%%

% select measure
measure = 4; 

% pick epoch
epoch = 11;
% take values
xx = filtered_rate_rnns_entropy_statistics.L1(:,epoch,measure);
xy = filtered_rate_rnns_entropy_statistics.seRNN(:,epoch,measure);
% get indexes of accurate networks
indx = find(~isnan(xx));
indy = find(~isnan(xy));
% scale factor for x label regularisation
sf = 0.001;
% plot figure
h = figure; h.Position = [100 500 450 300];
scatter(sf*indx,xx(indx),...
        50,'o','markerfacecolor',network_data.trained_rnns.l1.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; b.FontName = 'Gills Sans'; b.FontSize = 12;
hold on;
scatter(sf*indy,xy(indy),...
    50,'o','markerfacecolor',network_data.trained_rnns.seRNN.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02];
xlabel('Regularisation (\gamma_{max})'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
legend({'L1','seRNN'},'box','off');

%%% figure 5b %%%

% select measure
measure = 5; 

% pick epoch
epoch = 11;
% take values
xx = filtered_rate_rnns_entropy_statistics.L1(:,epoch,measure);
xy = filtered_rate_rnns_entropy_statistics.seRNN(:,epoch,measure);
% get indexes of accurate networks
indx = find(~isnan(xx));
indy = find(~isnan(xy));
% scale factor for x label regularisation
sf = 0.001;
% plot figure
h = figure; h.Position = [600 500 450 300];
scatter(sf*indx,xx(indx),...
        50,'o','markerfacecolor',network_data.trained_rnns.l1.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; b.FontName = 'Gills Sans'; b.FontSize = 12;
hold on;
scatter(sf*indy,xy(indy),...
    50,'o','markerfacecolor',network_data.trained_rnns.seRNN.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02];
xlabel('Regularisation (\gamma_{max})'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
legend({'L1','seRNN'},'box','off','location','southwest');

%%% figure 5c %%%

epoch = 11;
nets = [101 202 301 400 497]; % set valid networks (converge)
h = figure; h.Position = [100 100 1500 300];
for i = 1:length(nets);
    net = nets(i);
    subplot(1,length(nets),i);
    % L1
    type = 1;
    % get network
    w = squeeze(network_data.trained_rnns.connectivity{type}(net,epoch,:,:));
    % compute eigenspectra - based on ks entropy
    eigen = eig(w);
    % plot the eigenspectra
    hold on;
    scatter(real(eigen),imag(eigen),...
        300,'.','markeredgecolor',network_data.trained_rnns.l1.palette);
    box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; 
    xlabel('Re(\lambda)'); ylabel('Im(\lambda)'); b.FontName = 'Gills Sans'; b.FontSize = 12; 
    % seRNNs
    type = 2;
    % get network
    w = squeeze(network_data.trained_rnns.connectivity{type}(net,epoch,:,:));
    % compute eigenspectra - based on ks entropy
    eigen = eig(w);
    % plot the eigenspectra
    scatter(real(eigen),imag(eigen),...
        300,'.','markeredgecolor',network_data.trained_rnns.seRNN.palette);
    box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; 
    xlabel('Re(\lambda)'); ylabel('Im(\lambda)'); b.FontName = 'Gills Sans'; b.FontSize = 12; 
    xlim([-1.2 1.2]); ylim([-1 1]);
end

%% supplementary figure 1 - comparisons to other models e.g., spatial 

%%% s.figure 1a %%%

% set measure
measure = 3;

% show a line example
mean_measure_L1 = mean(filtered_rate_rnns_entropy_statistics.L1(:,:,measure),1,'omitnan');
mean_measure_seRNN = mean(filtered_rate_rnns_entropy_statistics.seRNN(:,:,measure),1,'omitnan');
mean_measure_Donly = mean(filtered_rate_rnns_entropy_statistics.Donly(:,:,measure),1,'omitnan');
mean_measure_Conly = mean(filtered_rate_rnns_entropy_statistics.Conly(:,:,measure),1,'omitnan');
mean_measure_Random = mean(filtered_rate_rnns_entropy_statistics.Random(:,:,measure),1,'omitnan');
mean_measure_Hard = mean(filtered_rate_rnns_entropy_statistics.Hard(:,:,measure),1,'omitnan');
new_pals = [66 133 244; 251 188 5]./256;
h = figure; h.Position = [100 100 450 300];
plot(mean_measure_L1,'linewidth',5,'color',network_data.trained_rnns.l1.palette); hold on; 
plot(mean_measure_seRNN,'linewidth',5,'color',network_data.trained_rnns.seRNN.palette); hold on;
plot(mean_measure_Donly,'linewidth',5,'color',new_pals(1,:)); hold on;
plot(mean_measure_Conly,'linewidth',5,'color',new_pals(2,:)); hold on;
%plot(mean_measure_Random,'linewidth',5,'color',pals(3,:)); hold on;
%plot(mean_measure_Hard,'linewidth',5,'color',pals(4,:)); hold on;
legend({'L1','seRNN','\itD_{only}','\itC_{only}'},'location','northwest','box','off');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel('Epoch'); 
ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;

%%% s.figure 1b %%%

% set measure
measure = 1;

% show a line example
mean_measure_L1 = mean(filtered_rate_rnns_entropy_statistics.L1(:,:,measure),1,'omitnan');
mean_measure_seRNN = mean(filtered_rate_rnns_entropy_statistics.seRNN(:,:,measure),1,'omitnan');
mean_measure_Donly = mean(filtered_rate_rnns_entropy_statistics.Donly(:,:,measure),1,'omitnan');
mean_measure_Conly = mean(filtered_rate_rnns_entropy_statistics.Conly(:,:,measure),1,'omitnan');
mean_measure_Random = mean(filtered_rate_rnns_entropy_statistics.Random(:,:,measure),1,'omitnan');
mean_measure_Hard = mean(filtered_rate_rnns_entropy_statistics.Hard(:,:,measure),1,'omitnan');
new_pals = [66 133 244; 251 188 5]./256;
h = figure; h.Position = [600 100 450 300];
plot(mean_measure_L1,'linewidth',5,'color',network_data.trained_rnns.l1.palette); hold on; 
plot(mean_measure_seRNN,'linewidth',5,'color',network_data.trained_rnns.seRNN.palette); hold on;
plot(mean_measure_Donly,'linewidth',5,'color',new_pals(1,:)); hold on;
plot(mean_measure_Conly,'linewidth',5,'color',new_pals(2,:)); hold on;
%plot(mean_measure_Random,'linewidth',5,'color',pals(3,:)); hold on;
%plot(mean_measure_Hard,'linewidth',5,'color',pals(4,:)); hold on;
legend({'L1','seRNN','\itD_{only}','\itC_{only}'},'location','southwest','box','off');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel('Epoch'); 
ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
