%% replication of figures for constrained RNNs: SPIKING
% written by danyal akarca, imperial college london & university of cambridge, 2024

% this code allows for replicating key spiking RNN figures

% set up code
clear; clc;
repo = '/Users/da04/Desktop/repo'; % set repo directory
cd(repo); % cd to repo
load('data/spiking_data.mat'); % load spiking data
load('data/spiking_rnns_entropy_statistics.mat'); % load spiking statistics (generated by spiking_generate_statistics.m)
load('data/rate_data.mat'); % load rate data for the palette
% add paths
addpath('prereq/2019_03_03_BCT/'); % load prereqisites
addpath('prereq/colorBrewer/'); % load prereqisites

%% before replication - store convergent networks

accthr = 0.45; % set accuracy threshold
filtered_spiking_rnns_entropy_statistics = spiking_rnns_entropy_statistics;
nstat = 6; % set number of statistics
epochaccthr = 50; % at what epoch they should be at that accuracy
stat_label = string({... % set labels
    'Shannon entropy (W)',... % shannon of absolute weight matrix
    'Shannon entropy (C)',... % shannon of normalised communicability matrix of absolute weight matrix
    'Modularity (Q)',... % directed modularity
    '\lambda_{max}',... % leading eigenvalue (non absolute weight matrix)
    'Spectral entropy',... % spectral entropy (non absolute weight matrix)
    'Total weight'}); % total absolute weights

% loop over networks and epochs
for net = 1:100;
    for epoch = 1:50;
        if spiking_data.L1.accuracy.test(epochaccthr,net) < accthr;
        filtered_spiking_rnns_entropy_statistics.L1(net,epoch,:) = nan(1,nstat);
        end
        if spiking_data.seRNN.accuracy.test(epochaccthr,net) < accthr;
        filtered_spiking_rnns_entropy_statistics.seRNN(net,epoch,:) = nan(1,nstat);
        end
    end
end

%% figure 2 - modularity, shannon entropy, relationships

%%% figure 2a %%%

% set measure
measure = 3;

% get measures
mean_measure_L1 = mean(filtered_spiking_rnns_entropy_statistics.L1(:,:,measure),1,'omitnan');
se_measure_L1 = std(filtered_spiking_rnns_entropy_statistics.L1(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_spiking_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
mean_measure_seRNN = mean(filtered_spiking_rnns_entropy_statistics.seRNN(:,:,measure),1,'omitnan');
se_measure_seRNN = std(filtered_spiking_rnns_entropy_statistics.seRNN(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_spiking_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
% visualise
h = figure; h.Position = [100 100 450 300];
u = errorbar(mean_measure_L1,2*se_measure_L1,...
    'linewidth',4,...
    'color',network_data.trained_rnns.l1.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
hold on;
u = errorbar(mean_measure_seRNN,2*se_measure_seRNN,...
    'linewidth',4,...
    'color',network_data.trained_rnns.seRNN.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel('Epoch'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
xlim([.5 50.5]);
legend({'L1','seRNN'},'box','off','location','northwest');

%%% figure 2b %%%

% set measure
measure = 1;

% get measures
mean_measure_L1 = mean(filtered_spiking_rnns_entropy_statistics.L1(:,:,measure),1,'omitnan');
se_measure_L1 = std(filtered_spiking_rnns_entropy_statistics.L1(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_spiking_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
mean_measure_seRNN = mean(filtered_spiking_rnns_entropy_statistics.seRNN(:,:,measure),1,'omitnan');
se_measure_seRNN = std(filtered_spiking_rnns_entropy_statistics.seRNN(:,:,measure),[],1,'omitnan')./sqrt(sum(filtered_spiking_rnns_entropy_statistics.L1(:,:,measure)~=NaN));
% visualise
h = figure; h.Position = [600 100 450 300];
u = errorbar(mean_measure_L1,2*se_measure_L1,...
    'linewidth',4,...
    'color',network_data.trained_rnns.l1.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
hold on;
u = errorbar(mean_measure_seRNN,2*se_measure_seRNN,...
    'linewidth',4,...
    'color',network_data.trained_rnns.seRNN.palette);
u.Line.ColorType = 'truecoloralpha';
u.Line.ColorData(4) = 0.5*256;
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel('Epoch'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
xlim([.5 50.5]);
legend({'L1','seRNN'},'box','off','location','northeast');

%%% figure 2c %%%

% pick epoch
epoch = 50;
% pick network measures
xmeasure = 3; 
ymeasure = 1;

% relate L1 and seRNN
h = figure; h.Position = [1100 100 450 300];
% visualise
scatter(filtered_spiking_rnns_entropy_statistics.L1(:,epoch,xmeasure),filtered_spiking_rnns_entropy_statistics.L1(:,epoch,ymeasure),...
    50,'o','markerfacecolor',network_data.trained_rnns.l1.palette,'markeredgecolor','w');
hold on;
scatter(filtered_spiking_rnns_entropy_statistics.seRNN(:,epoch,xmeasure),filtered_spiking_rnns_entropy_statistics.seRNN(:,epoch,ymeasure),...
    50,'o','markerfacecolor',network_data.trained_rnns.seRNN.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; xlabel(stat_label(xmeasure)); ylabel(stat_label(ymeasure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
legend({'L1','seRNN'},'box','off');

%% figure 5 - spectral changes under constraints

%%% figure 5a %%%

% select measure
measure = 4; 

% pick epoch
epoch = 50;
% take values
xx = filtered_spiking_rnns_entropy_statistics.L1(:,epoch,measure);
xy = filtered_spiking_rnns_entropy_statistics.seRNN(:,epoch,measure);
% get indexes of accurate networks
indx = find(~isnan(xx));
indy = find(~isnan(xy));
% scale factor for x label regularisation
sf = 0.01;
% plot figure
h = figure; h.Position = [100 500 450 300];
scatter(sf*indx,xx(indx),...
        50,'o','markerfacecolor',network_data.trained_rnns.l1.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; b.FontName = 'Gills Sans'; b.FontSize = 12;
hold on;
scatter(sf*indy,xy(indy),...
    50,'o','markerfacecolor',network_data.trained_rnns.seRNN.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02];
xlabel('Regularisation (\gamma_{max})'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
legend({'L1','seRNN'},'box','off');
xlim([0 1]);

%%% figure 5b %%%

% select measure
measure = 5; 

% pick epoch
epoch = 50;
% take values
xx = filtered_spiking_rnns_entropy_statistics.L1(:,epoch,measure); xx(end) = [];
xy = filtered_spiking_rnns_entropy_statistics.seRNN(:,epoch,measure); xy(end) = [];
% get indexes of accurate networks
indx = find(~isnan(xx));
indy = find(~isnan(xy));
% scale factor for x label regularisation
sf = 0.01;
% plot figure
h = figure; h.Position = [600 500 450 300];
scatter(sf*indx,xx(indx),...
        50,'o','markerfacecolor',network_data.trained_rnns.l1.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; b.FontName = 'Gills Sans'; b.FontSize = 12;
hold on;
scatter(sf*indy,xy(indy),...
    50,'o','markerfacecolor',network_data.trained_rnns.seRNN.palette,'markeredgecolor','w');
box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02];
xlabel('Regularisation (\gamma_{max})'); ylabel(stat_label(measure)); b.FontName = 'Gills Sans'; b.FontSize = 12;
legend({'L1','seRNN'},'box','off','location','southwest');

%%% figure 5c %%%

epoch = 30;
nets = [11 21 31 41 51]; % set valid networks (converge)
h = figure; h.Position = [100 100 1500 300];
for i = 1:length(nets);
    net = nets(i);
    subplot(1,length(nets),i);
    % L1
    % get network
    w = squeeze(spiking_data.L1.hidden(net,epoch,:,:));
    % compute eigenspectra - based on ks entropy
    eigen = eig(w);
    % plot the eigenspectra
    hold on;
    scatter(real(eigen),imag(eigen),...
        300,'.','markeredgecolor',network_data.trained_rnns.l1.palette);
    box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; 
    xlabel('Re(\lambda)'); ylabel('Im(\lambda)'); b.FontName = 'Gills Sans'; b.FontSize = 12; 
    % seRNNs
    % get network
    w = squeeze(spiking_data.seRNN.hidden(net,epoch,:,:));
    % compute eigenspectra - based on ks entropy
    eigen = eig(w);
    % plot the eigenspectra
    scatter(real(eigen),imag(eigen),...
        300,'.','markeredgecolor',network_data.trained_rnns.seRNN.palette);
    box off; b = gca; b.TickDir = 'out'; b.TickLength = [.02 .02]; 
    xlabel('Re(\lambda)'); ylabel('Im(\lambda)'); b.FontName = 'Gills Sans'; b.FontSize = 12; 
    xlim([-1.2 1.2]); ylim([-1 1]);
end
